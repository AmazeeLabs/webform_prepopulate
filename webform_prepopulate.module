<?php

/**
 * @file
 * Contains webform_prepopulate.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_help().
 */
function webform_prepopulate_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the webform_prepopulate module.
    case 'help.page.webform_prepopulate':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Pre-populate a Drupal Webform with an external data source without disclosing information in the URL.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function webform_prepopulate_form_webform_settings_form_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  /** @var \Drupal\Core\Entity\EntityFormInterface $webform_object */
  $form_object = $form_state->getFormObject();
  /** @var \Drupal\webform\Entity\Webform $webform_entity */
  $webform_entity = $form_object->getEntity();
  $webform_prepopulate_settings = $webform_entity->getThirdPartySettings('webform_prepopulate');
  $form_prepopulate_weight = (int) $form['form_behaviors']['form_prepopulate']['#weight'];
  $form['form_behaviors']['form_prepopulate_enable_file'] = [
    '#type' => 'checkbox',
    '#title' => t('Use a file to prepopulate'),
    // @todo add hint if there are already entries in the database for this webform.
    '#description' => t('Upload a file to insert or replace prepopulate data. The file is converted as a database storage then deleted.'),
    '#default_value' => isset($webform_prepopulate_settings['form_prepopulate_enable_file']) ? $webform_prepopulate_settings['form_prepopulate_enable_file'] : FALSE,
    '#states' => [
      'visible' => [
        ':input[name="form_prepopulate"]' => ['checked' => TRUE],
      ],
    ],
    '#weight' => ++$form_prepopulate_weight,
  ];
  // States for managed_file
  // https://www.drupal.org/project/drupal/issues/2847425
  // Description for managed_file
  // https://www.drupal.org/project/drupal/issues/1744226
  $validators = [
    // @todo improve by adding other extensions
    'file_validate_extensions' => ['csv'],
    'file_validate_size' => [file_upload_max_size()],
  ];
  $form['form_behaviors']['form_prepopulate_file'] = [
    '#type' => 'managed_file',
    '#title' => t('Prepopulate file'),
    // @todo check if private file system is configured properly or use tmp.
    '#upload_location' => 'private://webform_prepopulate',
    '#upload_validators' => $validators,
    '#states' => [
      'visible' => [
        ':input[name="form_prepopulate"]' => ['checked' => TRUE],
        ':input[name="form_prepopulate_enable_file"]' => ['checked' => TRUE],
      ],
      'required' => [
        ':input[name="form_prepopulate_enable_file"]' => ['checked' => TRUE],
      ],
    ],
    '#weight' => ++$form_prepopulate_weight,
  ];
  // @todo add option to set the delimiter.

  $form['#entity_builders'][] = '_webform_prepopulate_webform_settings_add_form_builder';
  $form['#validate'][] = '_webform_prepopulate_settings_validate';
}

/**
 * Entity builder for the Webform configuration entity.
 *
 * Stores the flag that tells the Webform to use prepopulate from a file source.
 *
 * @param string $entity_type
 * @param \Drupal\webform\Entity\Webform $webform
 * @param array $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 */
function _webform_prepopulate_webform_settings_add_form_builder($entity_type, \Drupal\webform\Entity\Webform $webform, &$form, FormStateInterface $form_state) {
  // Set the enable flag to the configuration entity.
  if ($form_state->getValue('form_prepopulate_enable_file')) {
    $webform->setThirdPartySetting('webform_prepopulate', 'form_prepopulate_enable_file', $form_state->getValue('form_prepopulate_enable_file'));
  }
  else {
    $webform->unsetThirdPartySetting('webform_prepopulate', 'form_prepopulate_enable_file');
  }
}

/**
 * Validation callback that checks if a file must be saved.
 *
 * The file is converted in a database storage then deleted to prevent
 * access from the outside. Also configuration entity is not a safe storage
 * for the file id as _webform_prepopulate_webform_settings_add_form_builder()
 * is called several times and the value could not be overwritten safely then.
 * Performance wise, while reading prepopulate data, a db is also
 * a better option.
 *
 * @param array $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 */
function _webform_prepopulate_settings_validate($form, FormStateInterface &$form_state) {
  if ($form_state->getValue('form_prepopulate_file')) {
    try {
      $prepopulate_file = $form_state->getValue('form_prepopulate_file');
      if (isset($prepopulate_file[0]) && !empty($prepopulate_file[0])) {
        /** @var \Drupal\Core\Entity\EntityFormInterface $webform_object */
        $form_object = $form_state->getFormObject();
        /** @var \Drupal\webform\Entity\Webform $webform_entity */
        $webform_entity = $form_object->getEntity();
        /** @var \Drupal\webform_prepopulate\WebformPrepopulateStorage $webformPrepopulateStorage */
        $webformPrepopulateStorage = \Drupal::service('webform_prepopulate.storage');
        $webformPrepopulateStorage->setDelimiter(',');
        $webformPrepopulateStorage->persistWebformDataFromFile($prepopulate_file[0], $webform_entity->id());
      }
    }
    catch (\Drupal\Core\Entity\EntityStorageException $exception) {
      $form_state->setErrorByName('form_prepopulate_file', $exception->getMessage());
    }
  }
}

/**
 * Implements hook_webform_submission_form_alter().
 *
 * Prepopulates if the hash is found in the storage.
 */
function webform_prepopulate_webform_submission_form_alter(array &$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  $hash = \Drupal::request()->query->get('hash');
  if (!empty($hash) && !empty($form['#webform_id'])) {
    // If there are too many access to several hashes, do not prepopulate.
    if (_webform_prepopulate_check_hash_access($hash, $form['#webform_id'])) {
      /** @var \Drupal\webform_prepopulate\WebformPrepopulateStorage $webformPrepopulateStorage */
      $webformPrepopulateStorage = \Drupal::service('webform_prepopulate.storage');
      $values = $webformPrepopulateStorage->getDataFromHash($hash, $form['#webform_id']);
      // Retain only Webform elements that have the same keys.
      $intersectKeys = array_intersect_key($values, $form['elements']);
      foreach ($intersectKeys as $elementKey => $elementValue) {
        // Override only if the form element default value is empty.
        if (empty($form['elements'][$elementKey]['#default_value'])) {
          $form['elements'][$elementKey]['#default_value'] = $values[$elementKey];
        }
      }
    }
    else {
      \Drupal::logger('webform_prepopulate')->warning(t('Hash access limit reached for ip @ip.', [
        '@ip' => \Drupal::request()->getClientIp(),
      ]));
    }
  }
}

// @todo cron for delete
// @todo move in utils service
function _webform_prepopulate_check_hash_access($hash, $webform_id) {
  // @todo if user bypass permission.
  // @todo if set in configuration.
  $maxHashAccess = 10;
  /** @var \Drupal\Core\TempStore\PrivateTempStore $tempStore */
  $tempStore = \Drupal::service('user.private_tempstore')->get('webform_prepopulate');
  $accessedHashes = [];
  try {
    if (empty($tempStore->get('accessed_hashes_'. $webform_id))) {
      $accessedHashes[] = $hash;
      $tempStore->set('accessed_hashes_'. $webform_id, $accessedHashes);
    }
    else {
      $accessedHashes = $tempStore->get('accessed_hashes_'. $webform_id);
      if (!in_array($hash, $accessedHashes)) {
        $accessedHashes[] = $hash;
        $tempStore->set('accessed_hashes_'. $webform_id, $accessedHashes);
      }
    }
  }
  catch (\Drupal\Core\TempStore\TempStoreException $exception) {
    \Drupal::logger('webform_prepopulate')->warning($exception->getMessage());
  }
  return count($accessedHashes) <= $maxHashAccess;
}
